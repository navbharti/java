'''
Created on Aug 20, 2014

@author: rajni
'''
from math import sqrt, pow

class DBSCAN:
    def __init__(self):
        self.name = 'DBSCAN'
        self.DB = [] #Database
        self.esp = 3000 #neighborhood distance for search
        self.MinPts = 2 #minimum number of points required to form a cluster
        self.cluster_inx = -1
        self.cluster = []
        
    def DBSCAN(self):
        for i in range(len(self.DB)):
            p_tmp = self.DB[i]
            if (not p_tmp.visited):
                #for each unvisited point P in dataset
                p_tmp.visited = True
                NeighborPts = self.regionQuery(p_tmp)
                if(len(NeighborPts) < self.MinPts):
                    #that point is a noise
                    p_tmp.isnoise = True
                    print p_tmp.show(), 'is a noise'
                else:
                    self.cluster.append([])
                    self.cluster_inx = self.cluster_inx + 1
                    self.expandCluster(p_tmp, NeighborPts)
    
    def expandCluster(self, P, neighbor_points):
        self.cluster[self.cluster_inx].append(P)
        iterator = iter(neighbor_points)
        while True:
            try:
                npoint_tmp = iterator.next()
            except StopIteration:
                # StopIteration exception is raised after last element
                break
            if (not npoint_tmp.visited):
                #for each point P' in NeighborPts
                npoint_tmp.visited = True
                NeighborPts_ = self.regionQuery(npoint_tmp)
                if (len(NeighborPts_) >= self.MinPts):
                    for j in range(len(NeighborPts_)):
                        neighbor_points.append(NeighborPts_[j])
            if (not self.checkMembership(npoint_tmp)):
                #if P' is not yet member of any cluster
                self.cluster[self.cluster_inx].append(npoint_tmp)
            else:
                print npoint_tmp.show(), 'is belonged to some cluster'
                                    
    def checkMembership(self, P):
        #will return True if point is belonged to some cluster
        ismember = False
        for i in range(len(self.cluster)):
            for j in range(len(self.cluster[i])):
                if (P.x == self.cluster[i][j].x and P.y == self.cluster[i][j].y):
                    ismember = True
        return ismember
    
    def regionQuery(self, P):
        #return all points within P's eps-neighborhood, except itself
        pointInRegion = []
        for i in range(len(self.DB)):
            p_tmp = self.DB[i]
            if (self.dist(P, p_tmp) < self.esp and P.x != p_tmp.x and P.y != p_tmp.y):
                pointInRegion.append(p_tmp)
        return pointInRegion
    
    def dist(self, p1, p2):
        #return distance between two point
        dx = (p1.x - p2.x)
        dy = (p1.y - p2.y)
        return sqrt(pow(dx,2) + pow(dy,2))
    
class Point:
    def __init__(self, x = 0, y = 0, visited = False, isnoise = False):
        self.x = x
        self.y = y
        self.visited = False
        self.isnoise = False
            
    def show(self):
        return self.x, self.y
    
if __name__=='__main__':
    #this is a mocking data just for test
    #vecPoint = [Point(11,3), Point(10,4), Point(11,5), Point(12,4), Point(13,5), Point(12,6), Point(6,10), Point(8,10), Point(5,12), Point(7,12), Point(16,13), Point(17,14), Point(17,15), Point(18,13), Point(18,16), Point(19,14), Point(19,15), Point(20,17)]
    vecPoint = [Point(25687.99,17572.00),
Point(19593.99,11147.00),
Point(22145.00,28248.00),
Point(16585.00,19975.00),
Point(19663.00,18390.00),
Point(16693.99,10845.00),
Point(26430.00,29319.00),
Point(26430.00,29319.00),
Point(18606.99,10855.00),
Point(21260.99,23759.00),
Point(22572.99,3831.00),
Point(22455.00,5374.00),
Point(17817.99,10469.00),
Point(19502.00,11751.00),
Point(20965.99,35233.00),
Point(21453.99,35079.00),
Point(33378.99,12234.00),
Point(26993.99,17629.00),
Point(32112.99,21280.00),
Point(27959.99,24117.00),
Point(20926.99,18932.00),
Point(20926.99,18932.00),
Point(31751.99,1931.00),
Point(19593.99,11147.00),
Point(20563.99,13089.00),
Point(28978.99,22993.00),
Point(16912.00,22210.00),
Point(6759.00,28542.00),
Point(32112.99,21280.00),
Point(19670.00,20175.00),
Point(15189.99,10051.00),
Point(9656.00,26127.00),
Point(9656.00,26127.00),
Point(25196.99,26717.00),
Point(12486.00,21919.00),
Point(26496.99,20059.00),
Point(26496.99,20059.00),
Point(12902.99,28258.00),
Point(25593.00,9356.00),
Point(22085.99,18630.00),
Point(15999.99,10459.00),
Point(24538.99,19619.00),
Point(17215.00,25176.00),
Point(24448.00,44502.00),
Point(21585.99,11102.00),
Point(9009.00,30197.00),
Point(9009.00,30197.00),
Point(29948.99,32548.00),
Point(35613.00,29169.00),
Point(11839.00,10795.00),
Point(16675.99,17342.00),
Point(17458.99,9401.00),
Point(19593.99,11147.00),
Point(19593.99,11147.00),
Point(36284.00,9492.00),
Point(13091.99,13654.00),
Point(20989.00,17784.00),
Point(36775.00,8772.00),
Point(6593.00,34499.00),
Point(0.00,34246.00),
Point(26580.00,29666.00),
Point(30077.99,21242.00),
Point(21582.99,1798.00),
Point(37516.99,0.00),
Point(7457.99,26690.00),
Point(21515.00,32286.00),
Point(6647.99,33836.00),
Point(24012.99,36356.00),
Point(24468.00,19046.00),
Point(18217.00,15954.00),
Point(16972.99,30746.00),
Point(20515.00,27907.00),
Point(28501.99,25959.00),
Point(8709.00,24437.00),
Point(21116.99,42770.00),
Point(9974.99,19229.00),
Point(29427.99,27943.00),
Point(28976.99,23396.00),
Point(20539.00,27385.00),
Point(19916.99,9844.00),
Point(13002.00,15949.00),
Point(9857.00,27454.00),
Point(21762.99,30407.00),
Point(8604.99,26738.00),
Point(16675.99,17342.00),
Point(20515.00,27907.00),
Point(21810.00,27398.00),
Point(21418.99,15361.00),
Point(29910.99,20022.00),
Point(30556.00,10101.00),
Point(5880.00,28505.00),
Point(32695.00,24741.00),
Point(23853.99,17488.00),
Point(28709.00,10365.00),
Point(18068.00,21532.00),
Point(21036.00,35000.00),
Point(17403.00,19014.00),
Point(19593.99,11147.00),
Point(17049.00,30422.00),
Point(21254.99,11273.00)

]    
    #Create object
    dbScan = DBSCAN()
    #Load data into object
    dbScan.DB = vecPoint;
    #Do clustering
    dbScan.DBSCAN()
    #Show result cluster  
    for i in range(len(dbScan.cluster)):
        print 'Cluster: ', i
        for j in range(len(dbScan.cluster[i])):
            print dbScan.cluster[i][j].show()