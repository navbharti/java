'''
Created on Aug 20, 2014

@author: rajni
'''
from math import sqrt, pow

class DBSCAN:
    def __init__(self):
        self.name = 'DBSCAN'
        self.DB = [] #Database
        self.esp = 3400 #neighborhood distance for search
        self.MinPts = 4 #minimum number of points required to form a cluster
        self.cluster_inx = -1
        self.cluster = []
        
    def DBSCAN(self):
        for i in range(len(self.DB)):
            p_tmp = self.DB[i]
            if (not p_tmp.visited):
                #for each unvisited point P in dataset
                p_tmp.visited = True
                NeighborPts = self.regionQuery(p_tmp)
                if(len(NeighborPts) < self.MinPts):
                    #that point is a noise
                    p_tmp.isnoise = True
                    #print p_tmp.show(), 'is a noise'
                else:
                    self.cluster.append([])
                    self.cluster_inx = self.cluster_inx + 1
                    self.expandCluster(p_tmp, NeighborPts)
    
    def expandCluster(self, P, neighbor_points):
        self.cluster[self.cluster_inx].append(P)
        iterator = iter(neighbor_points)
        while True:
            try:
                npoint_tmp = iterator.next()
            except StopIteration:
                # StopIteration exception is raised after last element
                break
            if (not npoint_tmp.visited):
                #for each point P' in NeighborPts
                npoint_tmp.visited = True
                NeighborPts_ = self.regionQuery(npoint_tmp)
                if (len(NeighborPts_) >= self.MinPts):
                    for j in range(len(NeighborPts_)):
                        neighbor_points.append(NeighborPts_[j])
            if (not self.checkMembership(npoint_tmp)):
                #if P' is not yet member of any cluster
                self.cluster[self.cluster_inx].append(npoint_tmp)
            else:
                print npoint_tmp.show(), 'is belonged to some cluster'
                                    
    def checkMembership(self, P):
        #will return True if point is belonged to some cluster
        ismember = False
        for i in range(len(self.cluster)):
            for j in range(len(self.cluster[i])):
                if (P.x == self.cluster[i][j].x and P.y == self.cluster[i][j].y):
                    ismember = True
        return ismember
    
    def regionQuery(self, P):
        #return all points within P's eps-neighborhood, except itself
        pointInRegion = []
        for i in range(len(self.DB)):
            p_tmp = self.DB[i]
            if (self.dist(P, p_tmp) < self.esp and P.x != p_tmp.x and P.y != p_tmp.y):
                pointInRegion.append(p_tmp)
        return pointInRegion
    
    def dist(self, p1, p2):
        #return distance between two point
        print "Distance module is called: "
        dx = (p1.x - p2.x)
        dy = (p1.y - p2.y)
        return sqrt(pow(dx,2) + pow(dy,2))
    
class Point:
    def __init__(self, x = 0, y = 0, visited = False, isnoise = False):
        self.x = x
        self.y = y
        self.visited = False
        self.isnoise = False
            
    def show(self):
        return self.x, self.y
    
if __name__=='__main__':
    #this is a mocking data just for test
    vecPoint = [Point(11,3), Point(10,4), Point(11,5), Point(12,4), Point(13,5), Point(12,6), Point(6,10), Point(8,10), Point(5,12), Point(7,12)]
    '''vecPoint = [Point(2488023.99,264001),
    Point(2481929.99,257576),
    Point(2484481,274676.999),
    Point(2478921,266404),
    Point(2481999,264819),
    Point(2479029.99,257274),
    Point(2488766,275748),
    Point(2488766,275748),
    Point(2480942.99,257283.999),
    Point(2483596.99,270188),
    Point(2484908.99,250259.999),
    Point(2484791,251803),
    Point(2480153.99,256898),
    Point(2481838,258179.999),
    Point(2483301.99,281662),
    Point(2483789.99,281508),
    Point(2495714.99,258662.999),
    Point(2489329.99,264057.999),
    Point(2494448.99,267709),
    Point(2490295.99,270546),
    Point(2483262.99,265360.999),
    Point(2483262.99,265360.999),
    Point(2494087.99,248360),
    Point(2481929.99,257576),
    Point(2482899.99,259518),
    Point(2491314.99,269421.999),
    Point(2479248,268638.999),
    Point(2469095,274971),
    Point(2494448.99,267709),
    Point(2482006,266604),
    Point(2477525.99,256479.999),
    Point(2471992,272555.999),
    Point(2471992,272555.999),
    Point(2487532.99,273146),
    Point(2474822,268347.999),
    Point(2488832.99,266487.999),
    Point(2488832.99,266487.999),
    Point(2475238.99,274686.999),
    Point(2487929,255785),
    Point(2484421.99,265058.999),
    Point(2478335.99,256888),
    Point(2486874.99,266047.999),
    Point(2479551,271604.999),
    Point(2486784,290930.999),
    Point(2483921.99,257531),
    Point(2471345,276626),
    Point(2471345,276626),
    Point(2492284.99,278976.999),
    Point(2497949,275598),
    Point(2474175,257224),
    Point(2479011.99,263771),
    Point(2479794.99,255829.999),
    Point(2481929.99,257576),
    Point(2481929.99,257576),
    Point(2498620,255921),
    Point(2475427.99,260082.999),
    Point(2483325,264212.999),
    Point(2499111,255200.999),
    Point(2468929,280927.999),
    Point(2462336,280675),
    Point(2488916,276095),
    Point(2492413.99,267670.999),
    Point(2483918.99,248227),
    Point(2499852.99,246429),
    Point(2469793.99,273119),
    Point(2483851,278715),
    Point(2468983.99,280264.999),
    Point(2486348.99,282784.999),
    Point(2486804,265475),
    Point(2480553,262382.999),
    Point(2479308.99,277174.999),
    Point(2482851,274336),
    Point(2490837.99,272387.999),
    Point(2471045,270866),
    Point(2483452.99,289199),
    Point(2472310.99,265657.999),
    Point(2491763.99,274371.999),
    Point(2491312.99,269824.999),
    Point(2482875,273814),
    Point(2482252.99,256273),
    Point(2475338,262377.999),
    Point(2472193,273882.999),
    Point(2484098.99,276835.999)]'''
        
    #Create object
    dbScan = DBSCAN()
    #Load data into object
    dbScan.DB = vecPoint;
    #Do clustering
    dbScan.DBSCAN()
    #Show result cluster  
    for i in range(len(dbScan.cluster)):
        print 'Cluster: ', i
        for j in range(len(dbScan.cluster[i])):
            print dbScan.cluster[i][j].show()